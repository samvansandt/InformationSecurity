///////////////////////////////////////////////////////////////////
// Student name:Samuel Van Sandt
// Course: COSC 4553 - Information Security
// Assignment: #3 - RC4 Stream Cipher
// File name: vansandt3.cpp
// Program Purpose: Encrypts and decrypts a text file using a Double Transposition Cipher
//
// Program Limitations: none known.
//
// Development Computer: IT-SVANSANDT-R
// Operating System:Windows 7
// Integrated Development Environment (IDE): notepad++/Cygwin
// Compiler: g++
// Build Directions: I've been testing with: g++ -Wall vansandt3.cpp -o vansandt3.exe
///////////////////////////////////////////////////////////////////

#include <iostream>
#include <cstdio>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

int main () {
  FILE * pFile;
  long lSize;
  char * buffer;
  size_t result;


  pFile = fopen ( "myfile.bin" , "rb" );
  if (pFile==NULL) {fputs ("File error",stderr); exit (1);}

  // obtain file size:
  fseek (pFile , 0 , SEEK_END);
  lSize = ftell (pFile);
  rewind (pFile);

  // allocate memory to contain the whole file:
  buffer = (char*) malloc (sizeof(char)*lSize);
  if (buffer == NULL) {fputs ("Memory error",stderr); exit (2);}

  // copy the file into the buffer:
  result = fread (buffer,1,lSize,pFile);
 // if (result != lSize) {fputs ("Reading error",stderr); exit (3);}
  std::cout << sizeof(result);
  // the whole file is now loaded in the memory buffer.
  // terminate
  fclose (pFile);
  free (buffer);




}



/*
{
  FILE * pFile;
  char buffer[] = { 'u' , 'y' , 'z' };
  pFile = fopen ("myfile.bin", "wb");
  fwrite (buffer , sizeof(char), sizeof(buffer), pFile);
  fclose (pFile);
  return 0;
}
